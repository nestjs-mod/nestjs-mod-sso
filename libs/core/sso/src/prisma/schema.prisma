generator client {
  provider = "prisma-client-js"
  
  output   = "../../../../../node_modules/@prisma/sso-client"
  binaryTargets = ["native","rhel-openssl-3.0.x","linux-musl-openssl-3.0.x","linux-musl"]
  
}
datasource db {
  provider          = "postgres"
  url               = env("SERVER_SSO_DATABASE_URL")
}
generator prismaClassGenerator {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../lib/generated/rest/dto"
  entityPrefix                    = ""
  fileNamingStyle                 = "kebab"
  flatResourceStructure           = "false"
  createDtoPrefix                 = "Create"
  annotateAllDtoProperties        = "true"
  classValidation                 = "true"
  reExport                        = "false"
  noDependencies                  = "false"
  dtoSuffix                       = "Dto"
  outputToNestJsResourceStructure = "false"
  updateDtoPrefix                 = "Update"
  definiteAssignmentAssertion     = "true"
  entitySuffix                    = ""
  prettier                        = "true"
  exportRelationModifierClasses   = "true"
}

model SsoProject {
  /// @DtoCreateHidden
  id                String              @id(map: "PK_SSO_PROJECTS") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name              String              @db.VarChar(255)
  nameLocale        Json?
  clientId          String              @unique(map: "UQ_SSO_PROJECTS__CLIENT_ID") @db.VarChar(100)
  clientSecret      String              @db.VarChar(255)
  public            Boolean
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt         DateTime            @default(now()) @db.Timestamp(6)
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt         DateTime            @default(now()) @db.Timestamp(6)
  SsoRefreshSession SsoRefreshSession[]
  SsoUser           SsoUser[]

  @@index([public], map: "IDX_SSO_PROJECTS__PUBLIC")
}

model SsoUser {
  /// @DtoCreateHidden
  id                String              @id(map: "PK_SSO_USERS") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email             String              @db.VarChar(255)
  phone             String?             @db.VarChar(255)
  username          String?             @db.VarChar(255)
  /// @DtoEntityHidden
  password          String              @db.VarChar(255)
  roles             String?             @db.VarChar(255)
  firstname         String?             @db.VarChar(255)
  lastname          String?             @db.VarChar(255)
  gender            String?             @db.VarChar(1)
  birthdate         DateTime?           @db.Timestamp(6)
  picture           String?
  appData           Json?
  revokedAt         DateTime?           @db.Timestamp(6)
  emailVerifiedAt   DateTime?           @db.Timestamp(6)
  phoneVerifiedAt   DateTime?           @db.Timestamp(6)
  projectId         String              @db.Uuid
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt         DateTime            @default(now()) @db.Timestamp(6)
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt         DateTime            @default(now()) @db.Timestamp(6)
  SsoRefreshSession SsoRefreshSession[]
  SsoProject        SsoProject          @relation(fields: [projectId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_SSO_USERS__PROJECT_ID")

  @@unique([email, projectId], map: "UQ_SSO_USERS__EMAIL")
  @@unique([username, projectId], map: "UQ_SSO_USERS__USERNAME")
  @@index([projectId], map: "IDX_SSO_USERS__PROJECT_ID")
}

model migrations_sso {
  installed_rank Int      @id(map: "__migrations_sso_pk")
  version        String?  @db.VarChar(50)
  description    String   @db.VarChar(200)
  type           String   @db.VarChar(20)
  script         String   @db.VarChar(1000)
  checksum       Int?
  installed_by   String   @db.VarChar(100)
  installed_on   DateTime @default(now()) @db.Timestamp(6)
  execution_time Int
  success        Boolean

  @@index([success], map: "__migrations_sso_s_idx")
  @@map("__migrations_sso")
}

model SsoRefreshSession {
  id           String     @id(map: "PK_SSO_REFRESH_SESSIONS") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  /// @DtoEntityHidden
  refreshToken String     @db.Uuid
  userAgent    String?    @db.VarChar(255)
  /// @DtoEntityHidden
  fingerprint  String?    @db.VarChar(255)
  userIp       String?    @db.VarChar(128)
  expiresAt    DateTime?  @db.Timestamp(6)
  userData     Json?
  enabled      Boolean
  userId       String     @db.Uuid
  projectId    String     @db.Uuid
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt    DateTime   @default(now()) @db.Timestamp(6)
  SsoProject   SsoProject @relation(fields: [projectId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_SSO_REFRESH_SESSIONS__PROJECT_ID")
  SsoUser      SsoUser    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_SSO_REFRESH_SESSIONS__USER_ID")

  @@index([userId, projectId], map: "IDX_SSO_REFRESH_SESSIONS_USER_ID")
  @@index([projectId], map: "IDX_SSO_REFRESH_SESSIONS__PROJECT_ID")
}
