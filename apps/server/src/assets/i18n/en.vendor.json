{
  "app-angular-rest-sdk": {},
  "app-rest-sdk": {},
  "auth-getText": {
    "Auth error": "Auth error",
    "Forbidden": "Forbidden",
    "User not found": "User not found",
    "ok": "ok",
    "lang must have one of the values: {{values}}": "lang must have one of the values: {{values}}",
    "Unauthorized": "Unauthorized"
  },
  "auth-angular": {
    "Sign-in": "Sign-in",
    "Sign-up": "Sign-up",
    "auth.sign-up-form.fields.email": "Email",
    "auth.sign-up-form.fields.password": "Password",
    "auth.sign-up-form.fields.confirm-password": "Confirm password",
    "auth.sign-in-form.fields.email": "Email",
    "auth.sign-in-form.fields.password": "Password",
    "auth.profile-form.fields.picture": "Picture",
    "auth.profile-form.fields.old-password": "Old password",
    "auth.profile-form.fields.new-password": "New password",
    "auth.profile-form.fields.confirm-new-password": "Confirm new password",
    "Success": "Success",
    "Validation errors": "Validation errors",
    "Profile data updated successfully!": "Profile data updated successfully!",
    "Update": "Update",
    "field \"{{label}}\"": "field \"{{label}}\""
  },
  "common": {},
  "common-angular": {
    "Unauthorized": "Unauthorized",
    "field \"{{label}}\"": "field \"{{label}}\""
  },
  "files-getText": {
    "Files error": "Files error",
    "Forbidden": "Forbidden",
    "ok": "ok",
    "Only those who uploaded files can delete them": "Only those who uploaded files can delete them",
    "Uploading files with extension \"{{ext}}\" is not supported": "Uploading files with extension \"{{ext}}\" is not supported"
  },
  "files-angular": {
    "files.image-file.change-file": "Change",
    "files.image-file.select-file": "Select"
  },
  "prisma-tools-getText": {
    "Common db error": "Common db error",
    "Database query error": "Database query error",
    "Invalid identifier": "Invalid identifier",
    "Invalid linked table identifier": "Invalid linked table identifier",
    "Not found error": "Not found error",
    "Unhandled error": "Unhandled error",
    "Unique error": "Unique error"
  },
  "testing": {},
  "validation-getText": {
    "Validation error": "Validation error"
  },
  "webhook-getText": {
    "Event not found": "Event not found",
    "Forbidden": "Forbidden",
    "ok": "ok",
    "Tenant ID not set": "Tenant ID not set",
    "User ID not set": "User ID not set",
    "User not found": "User not found",
    "Webhook error": "Webhook error"
  },
  "webhook-angular": {
    "Logs for webhook #{{webhookId}}": "Logs for webhook #{{webhookId}}",
    "input search text": "input search text",
    "Create new": "Create new",
    "Action": "Action",
    "Edit": "Edit",
    "Delete": "Delete",
    "Save": "Save",
    "Create": "Create",
    "Fill user credentials": "Fill user credentials",
    "Fill admin credentials": "Fill admin credentials",
    "Sign-in": "Sign-in",
    "webhook.form.fields.enabled": "Enabled",
    "webhook.form.fields.endpoint": "Endpoint",
    "webhook.form.fields.event-name": "Event name",
    "webhook.form.fields.headers": "Headers",
    "webhook.form.fields.request-timeout": "Request timeout",
    "webhook.form.fields.work-until-date": "Work until date",
    "webhook.form.fields.x-external-userId": "x-external-userId",
    "webhook.form.fields.x-external-tenantId": "x-external-tenantId",
    "webhook-log.grid.columns.id": "Id",
    "webhook-log.grid.columns.request": "Request",
    "webhook-log.grid.columns.response": "Response",
    "webhook-log.grid.columns.response-status": "Response status",
    "webhook-log.grid.columns.webhook-status": "Webhook status",
    "webhook.update-modal.title": "Update webhook #{{ id }}",
    "webhook.create-modal.title": "Create new webhook",
    "Cancel": "Cancel",
    "webhook.delete-modal.title": "Delete webhook #{{ id }}",
    "Yes": "Yes",
    "No": "No",
    "webhook.grid.columns.id": "Id",
    "webhook.grid.columns.enabled": "Enabled",
    "webhook.grid.columns.endpoint": "Endpoint",
    "webhook.grid.columns.event-name": "Event name",
    "webhook.grid.columns.headers": "Headers",
    "webhook.grid.columns.request-timeout": "Request timeout",
    "webhook.grid.columns.work-until-date": "Work until date",
    "Success": "Success",
    "id not set": "id not set",
    "Validation errors": "Validation errors",
    "field \"{{label}}\"": "field \"{{label}}\""
  },
  "runtime-tools": {},
  "data-prefetch": {},
  "bridge-react-webpack-plugin": {},
  "auth": {
    "Auth error": "Auth error",
    "Forbidden": "Forbidden",
    "User not found": "User not found",
    "ok": "ok",
    "lang must have one of the values: {{values}}": "lang must have one of the values: {{values}}",
    "Unauthorized": "Unauthorized"
  },
  "files": {
    "Files error": "Files error",
    "Forbidden": "Forbidden",
    "ok": "ok",
    "Only those who uploaded files can delete them": "Only those who uploaded files can delete them",
    "Uploading files with extension \"{{ext}}\" is not supported": "Uploading files with extension \"{{ext}}\" is not supported"
  },
  "prisma-tools": {
    "Common db error": "Common db error",
    "Database query error": "Database query error",
    "Invalid identifier": "Invalid identifier",
    "Invalid linked table identifier": "Invalid linked table identifier",
    "Not found error": "Not found error",
    "Unhandled error": "Unhandled error",
    "Unique error": "Unique error"
  },
  "validation": {
    "Validation error": "Validation error"
  },
  "webhook": {
    "Event not found": "Event not found",
    "Forbidden": "Forbidden",
    "ok": "ok",
    "Tenant ID not set": "Tenant ID not set",
    "User ID not set": "User ID not set",
    "User not found": "User not found",
    "Webhook error": "Webhook error"
  },
  "notifications-getText": {
    "Forbidden": "Forbidden",
    "Notifications error": "Notifications error",
    "Tenant ID not set": "Tenant ID not set",
    "The letter was not sent because the transport parameters or the letter parameters were empty": "The letter was not sent because the transport parameters or the letter parameters were empty",
    "User ID not set": "User ID not set"
  },
  "sso-getText": {
    "$constraint1 do not match to $property": "$constraint1 do not match to $property",
    "Access token expired": "Access token expired",
    "Activate email not processed": "Activate email not processed",
    "Activate email processed": "Activate email processed",
    "Email not verified": "Email not verified",
    "Forbidden": "Forbidden",
    "Invalid refresh session": "Invalid refresh session",
    "Non-existent role specified": "Non-existent role specified",
    "ok": "ok",
    "Refresh token not provided": "Refresh token not provided",
    "Session expired": "Session expired",
    "Sso error": "Sso error",
    "User is exists": "User is exists",
    "User not found": "User not found",
    "Wrong activate email code": "Wrong activate email code",
    "Wrong old password": "Wrong old password",
    "Wrong password": "Wrong password",
    "Bad access token": "Bad access token"
  },
  "sso-angular": {
    "Users for project #{{projectId}}": "Users for project #{{projectId}}",
    "input search text": "input search text",
    "Action": "Action",
    "Edit": "Edit",
    "Delete": "Delete",
    "Create new": "Create new",
    "Save": "Save",
    "Create": "Create",
    "sso-user.form.fields.app-data": "Additional data",
    "sso-user.form.fields.birthdate": "Birth date",
    "sso-user.form.fields.email": "Email",
    "sso-user.form.fields.email-verified-at": "Email verified at",
    "sso-user.form.fields.firstname": "First name",
    "sso-user.form.fields.gender": "Gender",
    "sso-user.form.fields.lastname": "Last name",
    "sso-user.form.fields.phone": "Phone",
    "sso-user.form.fields.phone-verified-at": "Phone verified at",
    "sso-user.form.fields.picture": "Picture",
    "sso-user.form.fields.revoked-at": "Revoked at",
    "sso-user.form.fields.roles": "Roles",
    "sso-user.form.fields.username": "Username",
    "sso-project.form.fields.client-id": "Client id",
    "sso-project.form.fields.client-secret": "Client secret",
    "sso-user.update-modal.title": "Edit user #{{ id }}",
    "sso-user.create-modal.title": "Create user",
    "Cancel": "Cancel",
    "sso-user.delete-modal.title": "Delete user #{{ id }}",
    "Yes": "Yes",
    "No": "No",
    "sso-user.grid.columns.id": "ID",
    "sso-user.grid.columns.app-data": "Additional data",
    "sso-user.grid.columns.birthdate": "Birth date",
    "sso-user.grid.columns.email": "Email",
    "sso-user.grid.columns.email-verified-at": "Email verified at",
    "sso-user.grid.columns.firstname": "First name",
    "sso-user.grid.columns.gender": "Gender",
    "sso-user.grid.columns.lastname": "Last name",
    "sso-user.grid.columns.phone": "Phone",
    "sso-user.grid.columns.phone-verified-at": "Phone verified at",
    "sso-user.grid.columns.picture": "Picture",
    "sso-user.grid.columns.revoked-at": "Revoked at",
    "sso-user.grid.columns.roles": "Roles",
    "sso-user.grid.columns.username": "Username",
    "sso-project.update-modal.title": "Edit project #{{ id }}",
    "sso-project.create-modal.title": "Create project",
    "sso-project.delete-modal.title": "Delete project #{{ id }}",
    "sso-project.grid.columns.id": "ID",
    "sso-project.grid.columns.client-id": "Client ID",
    "sso-project.grid.columns.client-secret": "Client secret",
    "Success": "Success",
    "id not set": "ID not set",
    "Sign-in": "Sign in",
    "Sign-up": "Sign up",
    "sso.sign-up-form.fields.email": "Email",
    "sso.sign-up-form.fields.password": "Password",
    "sso.sign-up-form.fields.confirm-password": "Confirm password",
    "sso.sign-in-form.fields.email": "Email",
    "sso.sign-in-form.fields.password": "Password",
    "sso.profile-form.fields.picture": "Picture",
    "sso.profile-form.fields.old-password": "Old password",
    "sso.profile-form.fields.new-password": "New password",
    "sso.profile-form.fields.confirm-new-password": "Confirm new password",
    "Validation errors": "Validation errors",
    "Profile data updated successfully!": "Profile data updated successfully!",
    "Update": "Update",
    "field \"{{label}}\"": "field \"{{label}}\""
  },
  "two-factor-getText": {
    "Number of attempts of two factor code has been exhausted": "Number of attempts of two factor code has been exhausted",
    "recursive method recursiveGenTwoFactorCode has been run more than 10 times": "recursive method recursiveGenTwoFactorCode has been run more than 10 times",
    "Two factor code is outdate": "Two factor code is outdate",
    "Two factor code not set": "Two factor code not set",
    "Two factor error": "Two factor error",
    "Wrong two factor code": "Wrong two factor code"
  },
  "notifications": {
    "Forbidden": "Forbidden",
    "Notifications error": "Notifications error",
    "Tenant ID not set": "Tenant ID not set",
    "The letter was not sent because the transport parameters or the letter parameters were empty": "The letter was not sent because the transport parameters or the letter parameters were empty",
    "User ID not set": "User ID not set"
  },
  "sso": {
    "$constraint1 do not match to $property": "$constraint1 do not match to $property",
    "Access token expired": "Access token expired",
    "Activate email not processed": "Activate email not processed",
    "Activate email processed": "Activate email processed",
    "Email not verified": "Email not verified",
    "Forbidden": "Forbidden",
    "Invalid refresh session": "Invalid refresh session",
    "Non-existent role specified": "Non-existent role specified",
    "ok": "ok",
    "Refresh token not provided": "Refresh token not provided",
    "Session expired": "Session expired",
    "Sso error": "Sso error",
    "User is exists": "User is exists",
    "User not found": "User not found",
    "Wrong activate email code": "Wrong activate email code",
    "Wrong old password": "Wrong old password",
    "Wrong password": "Wrong password",
    "Bad access token": "Bad access token"
  },
  "two-factor": {
    "Number of attempts of two factor code has been exhausted": "Number of attempts of two factor code has been exhausted",
    "recursive method recursiveGenTwoFactorCode has been run more than 10 times": "recursive method recursiveGenTwoFactorCode has been run more than 10 times",
    "Two factor code is outdate": "Two factor code is outdate",
    "Two factor code not set": "Two factor code not set",
    "Two factor error": "Two factor error",
    "Wrong two factor code": "Wrong two factor code"
  }
}
